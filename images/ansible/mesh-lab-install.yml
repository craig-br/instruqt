# Configures mesh environment by reinstalling controller with additional nodes"
- name: Setup localhost for mesh instruqt lab
  hosts: localhost
  gather_facts: false

  vars:
    gcp_login: &gcp_login
      project: "{{ gcp_resources_project }}"
      zone: "{{ gcp_resources_zone }}"

  pre_tasks:
    - name: Include variable tasks
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/common/60_check_vars.yml"
        apply:
          tags:
            - always
      tags:
        - always

  tasks:
    # use '--tags never' if using ansible-playbook to install collections
    - name: Install host collections - {{ inventory_hostname }}
      vars:
        installer_host_collections:
          - google.cloud
          - ansible.posix
          - community.crypto
          - containers.podman
          - redhat_cop.controller_configuration
          - awx.awx
      community.general.ansible_galaxy_install:
        dest: /usr/share/ansible/collections
        type: collection
        name: "{{ item }}"
      loop: "{{ installer_host_collections }}"
      register: __collection_install
      when: (installer_host_collections is defined) and (installer_host_collections | length > 0)
      tags:
        - never

    - name: Remove GCP instances
      vars:
        gcp_resources_instances_state: absent
      ansible.builtin.include_role:
        name: gcp_resources
        tasks_from: manage_gcp_instances.yml

    - name: Create GCP instances
      ansible.builtin.include_role:
        name: gcp_resources
        tasks_from: manage_gcp_instances.yml
        apply:
          tags:
            - create-instances
      tags:
        - create-instances

    - name: Get GCP instance info # noqa args[module]
      google.cloud.gcp_compute_instance_info:
        filters:
          - labels.role = "{{ track_slug }}"
        <<: *gcp_login
      register: __gcp_node_instance_info
      tags:
        - always

    # - name: Remove previous known_hosts keys - {{ inventory_hostname }}
    #   ansible.builtin.known_hosts:
    #     name: "{{ item.networkInterfaces[0].accessConfigs[0].natIP }}"
    #     state: absent
    #   loop: "{{ __gcp_node_instance_info.resources }}"
    #   loop_control:
    #     label: "{{ item.name }}"
    #   when: (__gcp_node_instance_info.resources is defined) and (__gcp_node_instance_info.resources | length > 0)
    #   tags:
    #     - create-instances
    #     - ssh-key

    - name: Wait for gcloud instances to start
      when:
        - (__gcp_node_instance_info.resources is defined) and (__gcp_node_instance_info.resources | length > 0)
      tags:
        - create-instances
      block:
        - name: Remove previous known_hosts keys - {{ inventory_hostname }}
          ansible.builtin.known_hosts:
            name: "{{  __instances_item.networkInterfaces[0].accessConfigs[0].natIP }}"
            state: absent
          loop: "{{ __gcp_node_instance_info.resources }}"
          loop_control:
            loop_var: __instances_item
            label: "{{  __instances_item.name }}"

        - name: Wait for gcloud instances - SSH
          ansible.builtin.wait_for:
            host: "{{ __instances_ssh_async_item.networkInterfaces[0].accessConfigs[0].natIP }}"
            port: 22
            delay: 1
            timeout: 180
          loop: "{{ __gcp_node_instance_info.resources }}"
          loop_control:
            loop_var: __instances_ssh_async_item
            label: "{{ __instances_ssh_async_item.name }}"
          async: 1000
          poll: 0
          register: __instances_ssh_async
          changed_when: not __instances_ssh_async.changed

        - name: Wait for gcloud instances - SSH | Async
          ansible.builtin.async_status: # noqa args[module]
            jid: "{{ __instances_ssh_async_result_item.ansible_job_id }}"
          retries: 180
          delay: 1
          loop: "{{ __instances_ssh_async.results }}"
          loop_control:
            loop_var: __instances_ssh_async_result_item
            label: "{{ __instances_ssh_async_result_item.__instances_ssh_async_item.name }}"
          until: __instances_ssh_async_result.finished
          register: __instances_ssh_async_result
          when: __instances_ssh_async_result_item.ansible_job_id is defined
      rescue:
        - name: Print error message and remove instances
          ansible.builtin.fail:
            msg: |
              "Rescue - Unable to connect to GCloud instances SSH.
              "{{ __instances_ssh_async_result }}"

    - name: Add gcp node hosts to inventory
      ansible.builtin.add_host:
        name: "{{ item.name }}"
        groups: "execnodes"
        ansible_host: "{{ item.networkInterfaces[0].accessConfigs[0].natIP }}"
      args: "{{ gcp_inventory_host_vars | default(omit) }}"
      loop: "{{ __gcp_node_instance_info.resources }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - (item.labels["mesh-type"] == "hop") or (item.labels["mesh-type"] == "execution")
        - (__gcp_node_instance_info.resources is defined) and (__gcp_node_instance_info.resources | length > 0)
      tags:
        - create-instances

    - name: Add gcp controller hosts to inventory
      ansible.builtin.add_host:
        name: "{{ item.name }}"
        groups: "automationcontroller"
        ansible_host: "{{ item.networkInterfaces[0].accessConfigs[0].natIP }}"
      args: "{{ gcp_inventory_host_vars }}"
      loop: "{{ __gcp_node_instance_info.resources }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - item.labels["mesh-type"] == "controller"
        - (__gcp_node_instance_info.resources is defined) and (__gcp_node_instance_info.resources | length > 0)
      tags:
        - create-instances

    - name: Create install SSH key
      when: (__gcp_node_instance_info.resources is defined) and (__gcp_node_instance_info.resources | length > 0)
      tags:
        - create-instances
        - install-controller
      block:
        - name: Create temp dir for ssh keys
          ansible.builtin.tempfile:
            state: directory
            prefix: instruqt_ssh_
          register: _ssh_tempdir

        - name: Generate temp OpenSSH key pair for nodes
          community.crypto.openssh_keypair:
            path: "{{ _ssh_tempdir.path }}/instruqt_lab"
            force: true

# Run configuration on all instances
- name: Run config and setup on all instances
  hosts: all
  become: true
  gather_facts: true
  tags:
    - common-tasks

  pre_tasks:
    - name: Include variable tasks
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/common/60_check_vars.yml"
        apply:
          tags:
            - always
      tags:
        - always

  tasks:
    - name: Include common user tasks
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/common/5_configure_users.yml"

    - name: Add instruqt_lab ssh key to authorized keys
      ansible.posix.authorized_key:
        user: "{{ item }}"
        state: present
        key: "{{ lookup('file', hostvars.localhost._ssh_tempdir.path + '/instruqt_lab.pub') }}"
        comment: "Instruqt lab key"
      loop:
        - "{{ ansible_user }}"
        - "{{ student_username }}"
        - "{{ ansible_user_id }}" # root because of become: true

# configure the controller instance
- name: Setup controller
  hosts: automationcontroller
  gather_facts: false
  become: true
  tags:
    - install-controller

  pre_tasks:
    - name: Include variable tasks
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/common/60_check_vars.yml"
        apply:
          tags:
            - always
      tags:
        - always

  tasks:
    - name: Copy instruqt_lab ssh keys to controller - {{ ansible_user }}
      ansible.builtin.copy:
        src: "{{ hostvars.localhost._ssh_tempdir.path }}/"
        dest: "~{{ ansible_user }}/.ssh/"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0600"
        force: true
      when: (hostvars.localhost._ssh_tempdir.path is defined) and (hostvars.localhost._ssh_tempdir.path | length > 0)

    - name: Copy instruqt_lab ssh keys to controller - {{ ansible_user_id }}
      ansible.builtin.copy:
        src: "{{ hostvars.localhost._ssh_tempdir.path }}/"
        dest: "~/.ssh/" # home for root because of become: true
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        mode: "0600"
        force: true
      when: (hostvars.localhost._ssh_tempdir.path is defined) and (hostvars.localhost._ssh_tempdir.path | length > 0)

    - name: Get gcp node instance info # noqa args[module]
      google.cloud.gcp_compute_instance_info:
        filters:
          - labels.role = "{{ track_slug }}"
        <<: *gcp_login
      delegate_to: localhost
      become: false
      register: __gcp_node_instance_info

    - name: Set controller_hostname fact - {{ inventory_hostname }}
      ansible.builtin.set_fact:
        controller_hostname: "{{ item.networkInterfaces[0].accessConfigs[0].natIP }}"
      loop: "{{ hostvars.localhost.__gcp_node_instance_info.resources }}"
      when: item.name == lab['raleigh']['hostname']

    - name: Include common controller install tasks
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/common/50_install_controller.yml"

    - name: Include common controller post install tasks
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/common/70_controller_post_install.yml"

    # Check https://github.com/redhat-cop/controller_configuration
    - name: Create lab controller objects
      ansible.builtin.include_role:
        name: redhat_cop.controller_configuration.dispatch

    - name: Install code server
      ansible.builtin.include_role:
        name: code_server

# Run cleanup tasks on images
- name: Run config and setup on instances
  hosts: all
  become: true
  gather_facts: false

  pre_tasks:
    - name: Include variable tasks
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/common/60_check_vars.yml"
        apply:
          tags:
            - always
      tags:
        - always

  tasks:
    - name: Include common image cleanup tasks
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/common/10_image_cleanup.yml"

    - name: Remove known_hosts entries for root
      ansible.builtin.known_hosts:
        name: "{{ item.name }}"
        state: absent
      loop: "{{ gcp_resources_instances }}"

    - name: Remove known_hosts entries for {{ ansible_user }}
      ansible.builtin.known_hosts:
        name: "{{ item.name }}"
        state: absent
      become: false
      loop: "{{ gcp_resources_instances }}"

# Create GCP images
- name: Create Instruqt images
  hosts: localhost
  gather_facts: false

  pre_tasks:
    - name: Include variable tasks
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/common/60_check_vars.yml"
        apply:
          tags:
            - always
      tags:
        - always

  tasks:
    - name: Stop GCP instances
      vars:
        gcp_resources_instances_status: TERMINATED
      ansible.builtin.include_role:
        name: gcp_resources
        tasks_from: manage_gcp_instances.yml

    - name: Remove current GCP images
      vars:
        gcp_resources_images_state: absent
      ansible.builtin.include_role:
        name: gcp_resources
        tasks_from: manage_gcp_images.yml

    - name: Create new GCP images
      vars:
        gcp_resources_images_state: present
      ansible.builtin.include_role:
        name: gcp_resources
        tasks_from: manage_gcp_images.yml

    - name: Remove GCP instances
      vars:
        gcp_resources_instances_state: absent
      ansible.builtin.include_role:
        name: gcp_resources
        tasks_from: manage_gcp_instances.yml
